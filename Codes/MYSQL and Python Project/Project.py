# -*- coding: utf-8 -*-
"""ProgettoPieruzBianchiCurtiDiMatteo

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fiKsC5c1FNmD8E8xfqUGzhI813IZcvki

# Sezione Import
"""

!pip install mysqlclient

import sqlalchemy
from sqlalchemy import create_engine
from sqlalchemy.sql import text

import ipywidgets as ipw

from tabulate import tabulate

"""# Apertura Connessione

Username : utente29

Schema: db29
"""

#apertura della connessione con la base dati
def apriConnessione(username, password, db):
  connection_string = "mysql://"+username+":"+password+"@90.147.166.237/"+db
  engine = create_engine(connection_string)
  return engine.connect()

c=None

def on_btConnect_click(bt):
  global c
  c=apriConnessione(tUsername.value, tPassword.value, tSchema.value)

tUsername = ipw.Text(
    value='',
    placeholder='Inserire username',
    description='Username:',
    disabled=False
)

tSchema = ipw.Text(
    value='',
    placeholder='Inserire schema',
    description='Schema:',
    disabled=False
)

btConnect = ipw.Button(
    description='Connect',
    disabled=False,
    button_style='', # 'success', 'info', 'warning', 'danger' or ''
    tooltip='Connect',
    icon='check' # (FontAwesome names without the `fa-` prefix)
)

tPassword= ipw.Password(
    value='password',
    placeholder='Enter password',
    description='Password:',
    disabled=False
)

btConnect.on_click(on_btConnect_click)

display(tUsername)
display(tPassword)
display(tSchema)
display(btConnect)

"""# Caricamento Esami"""

# 1 stampa l'elenco di tutti gli esami presenti nella base dati
def caricaEsami():
  lista_esami=[]
  sql="SELECT ID, DATA, DIMENSIONE_FILE, LICENZA FROM ESAME"
  rs=c.execute(text(sql))
  for esame in rs.fetchall():
    id=esame[0]
    data=esame[1]
    dimensione_file=esame[2]
    licenza=esame[3]
    lista_esami.append((id, data, dimensione_file, licenza))
  print(tabulate(lista_esami, headers = ["ID","DATA","DIMENSIONE FILE","LICENZA"]))

def on_btCARICAESAMI_click(b):
  caricaEsami()

btCARICAESAMI = ipw.Button(
    description='Carica Esami',
    disabled=False,
    button_style='', # 'success', 'info', 'warning', 'danger' or ''
    tooltip='Carica',
    icon='check' # (FontAwesome names without the `fa-` prefix)
)

btCARICAESAMI.on_click(on_btCARICAESAMI_click)

display(btCARICAESAMI)

"""# Esami in Pubblicazione"""

# 2 elenco degli id degli esami citati in una pubblicazione
def elencaEsamiPubb(id_pubblicazione):
  lista_id=[]
  sql2="SELECT ESAME_ID FROM ESAME_has_PUBBLICAZIONE WHERE PUBBLICAZIONE_ID ="+str(id_pubblicazione)
  rs2=c.execute(text(sql2))
  for i in rs2.fetchall():
    esame=i[0]
    lista_id.append(esame)
  print(lista_id)

#elenco pubblicazioni tra cui scegliere
def elencoPubblicazioni():
  lista_pubblicazioni=[]
  sql="SELECT * FROM PUBBLICAZIONE"
  rs= c.execute(text(sql))
  for i in rs.fetchall():
    id = i[0]
    titolo = i[2]
    lista_pubblicazioni.append((str(id) + " '" + titolo +"' ", id))
  return lista_pubblicazioni

l= elencoPubblicazioni()

ddPUBB = ipw.Dropdown(
    options= l,
    value=l[0][1],
    description='PUBBLICAZIONE:',
)

def on_btESAMEPUBB_click(b):
  elencaEsamiPubb(ddPUBB.value)


btESAMEPUBB = ipw.Button(
    description='Carica Id',
    disabled=False,
    button_style='', # 'success', 'info', 'warning', 'danger' or ''
    tooltip='Carica',
    icon='check' # (FontAwesome names without the `fa-` prefix)
)

btESAMEPUBB.on_click(on_btESAMEPUBB_click)

display(ddPUBB)
display(btESAMEPUBB)


#usare 17, 18, 19

"""# Esami su Malati con Paradigma"""

# 3 elenco esami fatti con il paradigma X su pazienti malati
def paradigmaMalattia(paradigma):
  paradigma_malattia=[]
  sql3="SELECT E.ID FROM ESAME E JOIN ESAME_has_PARAMETRO EP ON E.ID = EP.ESAME_ID JOIN PARAMETRO P ON EP.PARAMETRO_ID = P.ID WHERE(E.SOGGETTO_ID IN (SELECT SOGGETTO_ID FROM SOGGETTO_has_PATOLOGIA_DISABILITA_COGNITIVA) OR SOGGETTO_ID IN (SELECT SOGGETTO_ID FROM SOGGETTO_has_PATOLOGIA_DISABILITA_MOTORIA) )AND P.PARADIGMA =" + "'"+str(paradigma)+"'"
  rs3=c.execute(text(sql3))
  for i in rs3.fetchall():
    id_esame = i[0]
    paradigma_malattia.append(id_esame)
  #print(tabulate(paradigma_malattia, headers = ["ID ESAME"]))
  print(paradigma_malattia)

def on_btCARICAPARAMALA_click(b):
  paradigmaMalattia(ddPARAD.value)

ddPARAD = ipw.Select(
    options= ['P300', 'SSVEP', 'CVEP', 'MU-RHYTHM'],
    description='PARADIGMA:',
    disabled=False,
)


btCARICAPARAMALA = ipw.Button(
    description='Carica Elenco',
    disabled=False,
    button_style='', # 'success', 'info', 'warning', 'danger' or ''
    tooltip='Carica',
    icon='check' # (FontAwesome names without the `fa-` prefix)
)

btCARICAPARAMALA.on_click(on_btCARICAPARAMALA_click)

display(ddPARAD)
display(btCARICAPARAMALA)

"""# Accuratezza Rilevazione"""

# 4 per un soggetto a scelta si restituisce il paradigma e le specifiche del benchmark per verificarne l'accuratezza
def parametrosoggetto(id):
  elenco_esami=[]
  sql4="SELECT E.ID AS ESAME_ID, P.PARADIGMA, B.MATRICE_CONFUSIONE, B.ACCURATEZZA, B.ENTROPIA, B.BITRATE FROM PARAMETRO P JOIN ESAME_has_PARAMETRO EP ON P.ID=EP.PARAMETRO_ID JOIN ESAME E ON E.ID = EP.ESAME_ID JOIN BENCHMARK B ON E.ID = B.ESAME_ID WHERE E.SOGGETTO_ID="+str(id)+" ORDER BY E.DATA"
  rs4=c.execute(text(sql4))
  for i in rs4.fetchall():
    esame_id=i[0]
    paradigma=i[1]
    matrice_confusione=i[2]
    accuratezza=i[3]
    entropia=i[4]
    bitrate=i[5]
    elenco_esami.append((esame_id, paradigma, matrice_confusione, accuratezza, entropia, bitrate))
  print(elenco_esami)

#elenco soggetti tra cui scegliere
def elencoSoggetti():
  lista_soggetti=[]
  sql="SELECT ID FROM SOGGETTO"
  rs= c.execute(text(sql))
  for i in rs.fetchall():
    id=i[0]
    lista_soggetti.append(id)
  return lista_soggetti

l= elencoSoggetti()

ddIDSOGG = ipw.Dropdown(
    options= l,
    value= l[0],
    description='ID SOGGETTO:',
    disabled=False,
)

#funzione per l'operazione
def on_btPARAMSOGG_click(b):
  parametrosoggetto(ddIDSOGG.value)


btPARAMSOGG = ipw.Button(
    description='Carica Id',
    disabled=False,
    button_style='', # 'success', 'info', 'warning', 'danger' or ''
    tooltip='Carica',
    icon='check' # (FontAwesome names without the `fa-` prefix)
)

btPARAMSOGG.on_click(on_btPARAMSOGG_click)

display(ddIDSOGG)
display(btPARAMSOGG)

#usare 7

"""# Aggiornamento Dettagli Soggetto"""

# 5 Aggiornare dati di un soggetto già esistente
def aggiornaSoggetto(id, nome, cognome, cf, nazionalita, sesso):
  sql5="UPDATE DETTAGLIO_SOGGETTO SET NOME=:nome, COGNOME=:cognome, CF=:cf, NAZIONALITA=:nazionalita, SESSO=:sesso WHERE SOGGETTO_ID="+str(id)
  c.execute(text(sql5), id=id, nome=nome, cognome=cognome, cf=cf, nazionalita=nazionalita, sesso=sesso)

def aggiornaDataSoggetto(id, data):
  sql51= f"UPDATE DETTAGLIO_SOGGETTO SET DATA_NASCITA=STR_TO_DATE('{tData.value}', '%d/ %m/ %Y') WHERE SOGGETTO_ID ={str(id)}"
  print(data)
  c.execute(text(sql51),id=id, data=data )


def on_btAggDati_click(b):
  sesso=rbSesso.value
  if sesso=="maschio":
    sesso="M"
  else:
    sesso="F"
  aggiornaSoggetto(ddIdSogg.value, tNome.value, tCognome.value, tCf.value, tNazionalita.value, sesso)
  aggiornaDataSoggetto(ddIdSogg.value, tData)

l1=elencoSoggetti()

ddIdSogg = ipw.Dropdown(
    options= l1,
    value= l1[0],
    description='ID SOGGETTO:',
    disabled=False,
)

tNome = ipw.Text(
    value='',
    placeholder='Nome',
    description='Nome:',
    disabled=False
)

tCognome = ipw.Text(
    value='',
    placeholder='Cognome',
    description='Cognome:',
    disabled=False
)

tCf = ipw.Text(
    value='',
    placeholder='CF',
    description='CF:',
    disabled=False
)

tNazionalita = ipw.Text(
    value='',
    placeholder='Nazionalità',
    description='Nazionalità:',
    disabled=False
)

tData = ipw.Text(
    value='',
    placeholder='gg/mm/aaaa',
    description='Data:',
    disabled=False
)

rbSesso=ipw.RadioButtons(
    options=["maschio","femmina"],
#    value='non orfano', # Defaults to ''
#    layout={'width': 'max-content'}, # If the items' names are long
    description='Sesso:',
    disabled=False
)

btAggDati = ipw.Button(
    description='Aggiorna soggetto',
    disabled=False,
    button_style='', # 'success', 'info', 'warning', 'danger' or ''
    tooltip='Inserisci soggetto',
    icon='check' # (FontAwesome names without the `fa-` prefix)
)


btAggDati.on_click(on_btAggDati_click)

display(ddIdSogg)
display(tNome)
display(tCognome)
display(tData)
display(tCf)
display(tNazionalita)
display(rbSesso)


display(btAggDati)

"""# Utilizzo Strumento X"""

# 6 elenco soggetti sui quali è stato fatto esame con uno strumento X
def elencoSoggStrum(strumento):
  elenco = []
  sql6 = f"SELECT S.ID FROM SOGGETTO S JOIN ESAME E ON S.ID = E.SOGGETTO_ID WHERE E.{strumento} IS NOT NULL"
  rs6= c.execute(text(sql6))
  for i in rs6.fetchall():
    id_sogg = i[0]
    elenco.append(id_sogg)
  print(elenco)

def on_btSOGGSTRUM_click(b):
  strumeto=ddSTRUM.value
  if strumeto=="NIRS":
    strumento="NIRS_ID"
  elif strumeto=="MEG":
    strumento="MEG_ID"
  elif strumeto=="RISONANZA":
    strumento="RISONANZA_ID"
  elif strumeto=="ELETTROENCEFALOGRAMMA":
    strumento="ELETTROENCEFALOGRAMMA_ID"
  elencoSoggStrum(strumento)


ddSTRUM = ipw.Select(
    options= ['NIRS', 'MEG', 'ELETTROENCEFALOGRAMMA', 'RISONANZA'],
    description='STRUMENTO:',
    disabled=False,
)

btCARICASOGGSTRUM = ipw.Button(
    description='Carica Elenco',
    disabled=False,
    button_style='', # 'success', 'info', 'warning', 'danger' or ''
    tooltip='Carica',
    icon='check' # (FontAwesome names without the `fa-` prefix)
)

btCARICASOGGSTRUM.on_click(on_btSOGGSTRUM_click)

display(ddSTRUM)
display(btCARICASOGGSTRUM)

"""# Benchmark e Trattamento"""

# 7 calcola la media del benchmarck degli esami i cui soggetti sono sottoposti ad un trattamento farmacologico
def mediaBenchmark():
  medie = []
  sql7 = "SELECT AVG(BITRATE) AS MEDIA_BITRATE, AVG(ACCURATEZZA) AS MEDIA_ACCURATEZZA, AVG(ENTROPIA) AS MEDIA_ENTROPIA FROM BENCHMARK B JOIN ESAME E ON B.ESAME_ID = E.ID WHERE E.SOGGETTO_ID IN (SELECT S.ID FROM SOGGETTO S JOIN TRATTAMENTO_FARMACOLOGICO T ON S.ID = T.SOGGETTO_ID)"
  rs7 = c.execute(text(sql7))
  for i in rs7.fetchall():
    m_bitrate = i[0]
    m_accuratezza = i[1]
    m_entropia = i[2]
    medie.append((m_bitrate, m_accuratezza, m_entropia))
  print(medie)

def on_btMEDIA_click(b):
    mediaBenchmark()

btMediedati = ipw.Button(
    description='Carica Medie',
    disabled=False,
    button_style='', # 'success', 'info', 'warning', 'danger' or ''
    tooltip='Inserisci soggetto',
    icon='check' # (FontAwesome names without the `fa-` prefix)
)


btMediedati.on_click(on_btMEDIA_click)
display(btMediedati)

"""# Inserimento Nuovo Esame"""

# 8 inseriento di un nuovo esame nella base dati
def inserimentoEsame(id, data, formato, dimensione, licenza, soggetto_id, struttura_id, applicazione_id, nirs_id, risonanza_id, meg_id, elettroencefalogramma_id):
  sql8=f"INSERT INTO ESAME VALUES ({id}, STR_TO_DATE('{tData.value}', '%d/ %m/ %Y'), '{ddFormato.value}', {tDim.value}, {licenza}, {ddSoggetto.value}, {ddStruttura.value}, {ddApplicazione.value}, {nirs_id}, {risonanza_id}, {meg_id}, {elettroencefalogramma_id})"
  c.execute(text(sql8), id=id, data=data, formato=formato, dimensione=dimensione, licenza=licenza, soggetto_id=soggetto_id, struttura_id=struttura_id, applicazione_id=applicazione_id, nirs_id=nirs_id, risonanza_id=risonanza_id, meg_id=meg_id, elettroencefalogramma_id=elettroencefalogramma_id)

def maxEsame():
  id=''
  sql="SELECT MAX(ID)FROM ESAME"
  rs=c.execute(text(sql))
  for i in rs.fetchone():
    id=i
  return id

def on_btINSERISCI_click(b):
  id= int(maxEsame())+1
  licenza=rbLicenza.value
  Nirs=ddNirs.value
  Meg=ddMeg.value
  Ris=ddRisonanza.value
  Elettr=ddElettr.value
  if licenza=="si":
    licenza=1
  else:
    licenza=0
  if Nirs==0:
    Nirs="NULL"
  else:
    Nirs=Nirs
  if Meg==0:
    Meg="NULL"
  else:
     Meg=Meg
  if Ris==0:
    Ris="NULL"
  else:
    Ris=Ris
  if Elettr==0:
    Elettr="NULL"
  else:
    Elettr=Elettr
  inserimentoEsame(id ,tData, ddFormato.value, tDim.value, licenza, ddSoggetto.value, ddStruttura.value, ddApplicazione.value, Nirs, Ris, Meg, Elettr)


tData = ipw.Text(
    value='',
    placeholder='gg/mm/aaaa',
    description='Data:',
    disabled=False
)

tFormato = ipw.Text(
    value='',
    placeholder='formato file ',
    description='Formato:',
    disabled=False
)
ddFormato = ipw.Dropdown(
    options= ["EFD","MatLab", "NPX", "BCI2000"],
    description='ID SOGGETTO:',
    disabled=False,
)

tDim = ipw.Text(
    value='',
    placeholder='dimensione',
    description='Dimensione:',
    disabled=False
)
rbLicenza=ipw.RadioButtons(
    options=["si","no"],
#    value='non orfano', # Defaults to ''
#    layout={'width': 'max-content'}, # If the items' names are long
    description='Licenza:',
    disabled=False
)
#usato in altra operazione
l=elencoSoggetti()
ddSoggetto = ipw.Dropdown(
    options= l,
    value= l[0],
    description='ID SOGGETTO:',
    disabled=False,
)

def elencoStruttura():
  lista=[]
  sql="SELECT ID FROM STRUTTURA"
  rs= c.execute(text(sql))
  for i in rs.fetchall():
    id=i[0]
    lista.append(id)
  return lista

j=elencoStruttura()

ddStruttura = ipw.Dropdown(
    options= j,
    value= j[0],
    description='ID STRUTTURA:',
    disabled=False,
)

def elencoApplicazione():
  lista=[]
  sql="SELECT ID FROM APPLICAZIONE"
  rs= c.execute(text(sql))
  for i in rs.fetchall():
    id=i[0]
    lista.append(id)
  return lista

m=elencoApplicazione()

ddApplicazione = ipw.Dropdown(
    options= m,
    value= m[0],
    description='ID APP:',
    disabled=False,
)

def elencoNirs():
  lista=[0]
  sql="SELECT ID FROM NIRS"
  rs= c.execute(text(sql))
  for i in rs.fetchall():
    id=i[0]
    lista.append(id)
  return lista

f=elencoNirs()

ddNirs = ipw.Dropdown(
    options= f,
    value= f[0],
    description='ID NIRS:',
    disabled=False,
)

def elencoMeg():
  lista=[0]
  sql="SELECT ID FROM MEG"
  rs= c.execute(text(sql))
  for i in rs.fetchall():
    id=i[0]
    lista.append(id)
  return lista

e=elencoMeg()

ddMeg = ipw.Dropdown(
    options= e,
    value= e[0],
    description='ID MEG:',
    disabled=False,
)

def elencoElettr():
  lista=[0]
  sql="SELECT ID FROM ELETTROENCEFALOGRAMMA"
  rs= c.execute(text(sql))
  for i in rs.fetchall():
    id=i[0]
    lista.append(id)
  return lista

z=elencoElettr()

ddElettr = ipw.Dropdown(
    options= z,
    value= z[0],
    description='ID ELETTROENCEFALOGRAMMA:',
    disabled=False,
)

def elencoRisonanza():
  lista=[0]
  sql="SELECT ID FROM RISONANZA"
  rs= c.execute(text(sql))
  for i in rs.fetchall():
    id=i[0]
    lista.append(id)
  return lista

r=elencoRisonanza()

ddRisonanza = ipw.Dropdown(
    options= r,
    value= r[0],
    description='ID RISONANZA:',
    disabled=False,
)

btInsert = ipw.Button(
    description='Inserire Esame',
    disabled=False,
    button_style='', # 'success', 'info', 'warning', 'danger' or ''
    tooltip='Inserisci esame',
    icon='check' # (FontAwesome names without the `fa-` prefix)
)


btInsert.on_click(on_btINSERISCI_click)

display(tData)
display(ddFormato)
display(tDim)
display(rbLicenza)
display(ddSoggetto)
display(ddStruttura)
display(ddApplicazione)
display(ddNirs)
display(ddRisonanza)
display(ddMeg)
display(ddElettr)
display(btInsert)

"""# Tipo di applicazione e tipo di patologia"""

# 9 contare il tipo di applicazione per gli esami di soggetti con un tipo di patologia
def contaApp():
  conta_app=[]
  sql9= f"SELECT A.TIPO, COUNT(A.TIPO) FROM APPLICAZIONE A JOIN ESAME E ON A.ID = E.APPLICAZIONE_ID JOIN SOGGETTO S ON S.ID = E.SOGGETTO_ID JOIN SOGGETTO_has_PATOLOGIA_DISABILITA_{rbPatologia.value}  SP ON SP.SOGGETTO_ID = S.ID GROUP BY A.TIPO"
  rs9=c.execute(text(sql9))
  for i in rs9.fetchall():
    tipo=i[0]
    conteggio=i[1]
    conta_app.append((tipo, conteggio))
  print(conta_app)

rbPatologia = ipw.RadioButtons(
    options=['MOTORIA', 'COGNITIVA'],
    value='MOTORIA',
    description='Tipo patologia',
    disabled=False
)

def on_btCONTA_click(b):
    contaApp()

btContaApp = ipw.Button(
    description='Conta applicazioni',
    disabled=False,
    button_style='', # 'success', 'info', 'warning', 'danger' or ''
    tooltip='',
    icon='check' # (FontAwesome names without the `fa-` prefix)
)

display(rbPatologia)
btContaApp.on_click(on_btCONTA_click)
display(btContaApp)

"""# Numero di pubblicazioni in un anno"""

# 10 numero di pubblicazioni di un ricercatore in un anno
def numero_pubblicazioni(anno):
  conta = []
  sql10= "SELECT R.ID, R.NOME, R.COGNOME, COUNT(PR.RICERCATORE_ID) AS NUMERO_PUBBLICAZIONI FROM RICERCATORE R JOIN PUBBLICAZIONE_has_RICERCATORE PR ON R.ID = PR.RICERCATORE_ID JOIN PUBBLICAZIONE P ON PR.PUBBLICAZIONE_ID = P.ID WHERE P.ANNO = "+ str(anno)+ " GROUP BY R.ID ORDER BY NUMERO_PUBBLICAZIONI "
  rs10 = c.execute(text(sql10))
  for i in rs10.fetchall():
    id = i[0]
    nome = i[1]
    cognome = i[2]
    conteggio = i[3]
    conta.append((id, nome, cognome, conteggio))
  print(conta)

def on_btNUMPUBB_click(b):
  numero_pubblicazioni(ddAnno.value)

def elencoAnni():
  lista = []
  sql10b = "SELECT DISTINCT ANNO FROM PUBBLICAZIONE ORDER BY ANNO"
  rs = c.execute(text(sql10b))
  for i in rs.fetchall():
    anno=i[0]
    lista.append(anno)
  return(lista)

j = elencoAnni()

ddAnno = ipw.Dropdown(
    options= j,
    value= j[0],
    description='ANNO:',
    disabled=False,
)

btNUMPUBB = ipw.Button(
  description='Carica',
  disabled=False,
  button_style='', # 'success', 'info', 'warning', 'danger' or ''
  tooltip='',
  icon='check' # (FontAwesome names without the `fa-` prefix)
)


btNUMPUBB.on_click(on_btNUMPUBB_click)
display(ddAnno)
display(btNUMPUBB)

"""# Eliminazione Pubblicazioni"""

# 11 cancellazione della pubblicazione datate ad un certo anno
def eliminaPubblicazione(anno):
  sql=f"DELETE FROM PUBBLICAZIONE WHERE ANNO={ddAnno.value}"
  c.execute(text(sql), anno=anno)

def on_btELIMINA_click(b):
  eliminaPubblicazione(ddAnno.value)

def elencoAnni():
  lista = []
  sql10b = "SELECT DISTINCT ANNO FROM PUBBLICAZIONE ORDER BY ANNO"
  rs = c.execute(text(sql10b))
  for i in rs.fetchall():
    anno=i[0]
    lista.append(anno)
  return(lista)

j = elencoAnni()

ddAnno = ipw.Dropdown(
    options= j,
    value= j[0],
    description='ANNO:',
    disabled=False,
)

btElimina = ipw.Button(
    description='Elimina',
    disabled=False,
    button_style='', # 'success', 'info', 'warning', 'danger' or ''
    tooltip='',
    icon='check' # (FontAwesome names without the `fa-` prefix)
)


btElimina.on_click(on_btELIMINA_click)
display(ddAnno)
display(btElimina)

#no 17, 18, 19

"""# Trattamento farmacologico e dati soggetto"""

# 12 trattamenti farmacologici passati di un determinato soggetto
def trattamento(id_soggetto):
  lista_trattamenti=[]
  sql11="SELECT DS.SOGGETTO_ID, DS.NOME, DS.COGNOME, DS.CF, TF.NOME_MEDICINALE, TF.DATA_INIZIO, TF.DATA_FINE FROM DETTAGLIO_SOGGETTO DS JOIN TRATTAMENTO_FARMACOLOGICO TF ON DS.SOGGETTO_ID = TF.SOGGETTO_ID WHERE TF.DATA_FINE IS NOT NULL AND DS.SOGGETTO_ID="+str(id_soggetto)
  rs11=c.execute(text(sql11))
  for i in rs11.fetchall():
    id=i[0]
    nome=i[1]
    cognome=i[2]
    cf=i[3]
    nome_medicinale=i[4]
    data_inizio=i[5]
    data_fine=i[6]
    lista_trattamenti.append((id, nome, cognome,cf, nome_medicinale, data_inizio, data_fine))
  print(lista_trattamenti)

def lista_soggetto():
  lista =[]
  sql11a = "SELECT SOGGETTO_ID, NOME, COGNOME FROM DETTAGLIO_SOGGETTO"
  rs11a = c.execute(text(sql11a))
  for i in rs11a.fetchall():
    a = i[0]
    if i[1] is None:
      b = "null"
    else:
      b = i[1]
    if i[2] is None:
      d = "null"
    else:
      d = i[2]
    lista.append((str(a) + " "+ b + " "+ d, a))
  return lista

l = lista_soggetto()

id_soggetto = ipw.Dropdown(
    options= l,
    value= l[0][1],
    description='Soggetto:',
)

def on_btTRATTSOGG_click(b):
  trattamento(id_soggetto.value)


btTRATTSOGG = ipw.Button(
    description='Carica Trattamento del Soggetto',
    disabled=False,
    button_style='', # 'success', 'info', 'warning', 'danger' or ''
    tooltip='Carica',
    icon='check' # (FontAwesome names without the `fa-` prefix)
)

btTRATTSOGG.on_click(on_btTRATTSOGG_click)

display(id_soggetto)

display(btTRATTSOGG)

#usare 5

"""

# Chiusura Connessione"""

#chiude la connessione il cui riferimento viene fornito in input
def chiudiConnessione(c):
  c.close()

tastoDisconnetti = ipw.Button(
    description='Disconnect',
    disabled=False,
    button_style='', # 'success', 'info', 'warning', 'danger' or ''
    tooltip='Disconnect',
    icon='check' # (FontAwesome names without the `fa-` prefix)
)
tastoDisconnetti.on_click(chiudiConnessione)
display(tastoDisconnetti)